// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ThreeDS_SDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Provides methods to pass UI customization parameters to the 3DS SDK.
SWIFT_CLASS("_TtC11ThreeDS_SDK13Customization")
@interface Customization : NSObject
/// Setter for the text font name
/// \param fontName The name of the font
///
///
/// throws:
/// InvalidInput
- (BOOL)setTextFontNameWithFontName:(NSString * _Nonnull)fontName error:(NSError * _Nullable * _Nullable)error;
/// Setter for the text color
/// \param hexColorCode a hex code representation of the required color as String
///
///
/// throws:
/// InvalidInput
- (BOOL)setTextColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Setter fot the text font size
/// \param fontSize the font size given as an integer value
///
///
/// throws:
/// InvalidInput
- (BOOL)setTextFontSizeWithFontSize:(NSInteger)fontSize error:(NSError * _Nullable * _Nullable)error;
/// Returns the text font name
///
/// returns:
/// String value of the font name or nil if non specified
- (NSString * _Nullable)getTextFontName SWIFT_WARN_UNUSED_RESULT;
/// Returns the text color as a hex code represntation of the given color or nil if non specified
///
/// returns:
/// String of the color in hex code format
- (NSString * _Nullable)getTextColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the text font size
///
/// returns:
/// Integer value representing the font size or 17 if not set
- (NSInteger)getTextFontSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provide methods for the 3DS Requestor App to pass button customization parameters to the 3DS SDK.
SWIFT_CLASS("_TtC11ThreeDS_SDK19ButtonCustomization")
@interface ButtonCustomization : Customization
/// Sets the background colour of the button.
/// \param hexColorCode Colour code in Hex format.
///
///
/// throws:
/// InvalidInput
- (BOOL)setBackgroundColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the radius of the button corners.
/// \param cornerRadius Radius (integer value) for the button corners.
///
///
/// throws:
/// InvalidInput
- (BOOL)setCornerRadiusWithCornerRadius:(NSInteger)cornerRadius error:(NSError * _Nullable * _Nullable)error;
/// Returns the background colour of the button.
///
/// returns:
/// background colour code (as a string) of the button.
- (NSString * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the radius of the button corners.
///
/// returns:
/// the radius (as an integer) of the button corners.
- (NSInteger)getCornerRadius SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// The ConfigParameters class shall represent the configuration parameters that are required by
/// the 3DS SDK for initialization.
SWIFT_CLASS("_TtC11ThreeDS_SDK16ConfigParameters")
@interface ConfigParameters : NSObject
/// The addParam method shall add a configuration parameter either to the specified group or to
/// the default group.
/// \param group Group to which the configuration parameter is to be added.
///
/// \param paramName Name of the configuration parameter.
///
/// \param paramValue Value of the configuration parameter.
///
///
/// throws:
/// InvalidInput This exception shall be thrown if paramName is not provided or if a
/// variable already exists in the dictionary.
- (BOOL)addParamWithGroup:(NSString * _Nullable)group paramName:(NSString * _Nonnull)paramName paramValue:(NSString * _Nonnull)paramValue error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provide methods for the 3DS Requestor App to pass text box customization parameters to the 3DS SDK.
SWIFT_CLASS("_TtC11ThreeDS_SDK18LabelCustomization")
@interface LabelCustomization : Customization
/// Sets the colour of the heading label text.
/// \param hexColorCode Colour code in Hex format.
///
///
/// throws:
/// InvalidInputExcpetion
- (BOOL)setHeadingTextColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the font type of the heading label text.
/// \param fontName Font type for the heading label text.
///
///
/// throws:
/// InvalidInput
- (BOOL)setHeadingTextFontNameWithFontName:(NSString * _Nonnull)fontName error:(NSError * _Nullable * _Nullable)error;
/// Sets the font size of the heading label text.
/// \param fontSize Font size for the heading label text.
///
///
/// throws:
/// InvalidInput
- (BOOL)setHeadingTextFontSizeWithFontSize:(NSInteger)fontSize error:(NSError * _Nullable * _Nullable)error;
/// Returns the colour of the heading label text.
///
/// returns:
/// The hex color code of the heading label text as a string.
- (NSString * _Nullable)getHeadingTextColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the font type of the heading label text.
///
/// returns:
/// The font type of the heading label text as a string.
- (NSString * _Nullable)getHeadingTextFontName SWIFT_WARN_UNUSED_RESULT;
/// Returns the font size of the heading label text.
///
/// returns:
/// The heading text font size as an integer.
- (NSInteger)getHeadingTextFontSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSCoder;

SWIFT_CLASS("_TtC11ThreeDS_SDK17SDKProgressDialog")
@interface SDKProgressDialog : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Class holding the UI details specific for a TextBox
SWIFT_CLASS("_TtC11ThreeDS_SDK20TextBoxCustomization")
@interface TextBoxCustomization : Customization
/// Sets the width of the text box border.
/// \param borderWidth Width (integer value) of the text box border.
///
///
/// throws:
/// InvalidInput
- (BOOL)setBorderWidthWithBorderWidth:(NSInteger)borderWidth error:(NSError * _Nullable * _Nullable)error;
/// Sets the color of the text box border.
/// \param hexColorCode Color code in Hex format.
///
///
/// throws:
/// InvalidInput
- (BOOL)setBorderColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the corner radius of the text box corners.
/// \param cornerRadius Radius (integer value) for the text box corners.
///
///
/// throws:
/// InvalidInput
- (BOOL)setCornerRadiusWithCornerRadius:(NSInteger)cornerRadius error:(NSError * _Nullable * _Nullable)error;
/// Returns the width of the text box border.
///
/// returns:
/// The width (as an integer) of the text box border.
- (NSInteger)getBorderWidth SWIFT_WARN_UNUSED_RESULT;
/// Returns the color of the text box border in hex colour code.
///
/// returns:
/// the hex color code (as a string) of the text box border.
- (NSString * _Nullable)getBorderColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the corner radius of the text box corners.
///
/// returns:
/// The radius (as an integer) of the text box corners
- (NSInteger)getCornerRadius SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class UiCustomization;

SWIFT_CLASS("_TtC11ThreeDS_SDK18ThreeDS2ServiceSDK")
@interface ThreeDS2ServiceSDK : NSObject
- (BOOL)initialize:(ConfigParameters * _Nonnull)configParameters locale:(NSString * _Nullable)locale uiCustomization:(UiCustomization * _Nullable)uiCustomization error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nullable)getSDKVersionAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)cleanupAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides methods for the 3DS Requestor App to pass toolbar customization parameters to the 3DS SDK.
SWIFT_CLASS("_TtC11ThreeDS_SDK20ToolbarCustomization")
@interface ToolbarCustomization : Customization
/// Sets the background colour for the toolbar.
/// \param hexColorCode Colour code in Hex format.
///
///
/// throws:
/// InvalidInputExpection
- (BOOL)setBackgroundColorWithHexColorCode:(NSString * _Nonnull)hexColorCode error:(NSError * _Nullable * _Nullable)error;
/// Sets the header text of the toolbar.
/// \param headerText Text for the header.
///
///
/// throws:
/// InvalidInput
- (BOOL)setHeaderTextWithHeaderText:(NSString * _Nonnull)headerText error:(NSError * _Nullable * _Nullable)error;
/// Sets the button text of the toolbar.
/// \param buttonText Text for the button. For example, “Cancel”.
///
///
/// throws:
/// InvalidInput
- (BOOL)setButtonTextWithButtonText:(NSString * _Nonnull)buttonText error:(NSError * _Nullable * _Nullable)error;
/// Returns the background colour for the toolbar.
///
/// returns:
/// Background colour code (as a String) for the toolbar.
- (NSString * _Nullable)getBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the header text of the toolbar.
///
/// returns:
/// The header text (as a String) of the toolbar.
- (NSString * _Nullable)getHeaderText SWIFT_WARN_UNUSED_RESULT;
/// Returns the button text of the toolbar.
///
/// returns:
/// The button text (as a String) of the toolbar.
- (NSString * _Nullable)getButtonText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






/// Provides the functionality required for 3DS SDK UI customization.
SWIFT_CLASS("_TtC11ThreeDS_SDK15UiCustomization")
@interface UiCustomization : NSObject
/// Sets the attributes of a ButtonCustomization object for an implementer-specific button type.
/// \param buttonCustomization A ButtonCustomization object.
///
/// \param buttonType Implementer-specific button type.
///
- (void)setButtonCustomizationWithButtonCustomization:(ButtonCustomization * _Nonnull)buttonCustomization buttonType:(NSString * _Nonnull)buttonType;
/// Sets the attributes of a ToolbarCustomization object.
/// \param toolbarCustomization A ToolbarCustomization object.
///
- (void)setToolbarCustomizationWithToolbarCustomization:(ToolbarCustomization * _Nonnull)toolbarCustomization;
/// Sets the attributes of a LabelCustomization object.
/// \param labelCustomization A LabelCustomization object.
///
- (void)setLabelCustomizationWithLabelCustomization:(LabelCustomization * _Nonnull)labelCustomization;
/// Sets the attributes of a TextBoxCustomization object.
/// \param textBoxCustomization A TextBoxCustomization object.
///
- (void)setTextBoxCustomizationWithTextBoxCustomization:(TextBoxCustomization * _Nonnull)textBoxCustomization;
/// Returns a ButtonCustomization object for an implementer-specific button type.
/// \param buttonType Implementer-specific button type.
///
///
/// returns:
/// A ButtonCustomization object.
- (ButtonCustomization * _Nullable)getButtonCustomizationWithButtonType:(NSString * _Nonnull)buttonType SWIFT_WARN_UNUSED_RESULT;
/// Returns a ToolbarCustomization object.
///
/// returns:
/// A ToolbarCustomization object.
- (ToolbarCustomization * _Nullable)getToolbarCustomization SWIFT_WARN_UNUSED_RESULT;
/// Returns a LabelCustomization object.
///
/// returns:
/// A LabelCustomization object.
- (LabelCustomization * _Nullable)getLabelCustomization SWIFT_WARN_UNUSED_RESULT;
/// Returns a TextBoxCustomization object.
///
/// returns:
/// A TextBoxCustomization object.
- (TextBoxCustomization * _Nullable)getTextboxCustomization SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
